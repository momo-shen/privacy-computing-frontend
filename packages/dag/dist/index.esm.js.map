{"version":3,"sources":["../src/context.ts","../src/actions/protocol.ts","../src/actions/add-edge.ts","../src/actions/add-node.ts","../src/actions/center-node.ts","../src/actions/change-status.ts","../src/actions/change-style.ts","../src/types/index.ts","../src/actions/clear-status.ts","../src/actions/copy.ts","../src/utils/platform.ts","../src/actions/drag-node.ts","../src/actions/move-node.ts","../src/actions/paste.ts","../src/actions/query-status.ts","../src/actions/remove-cell.ts","../src/actions/render.ts","../src/actions/run-all.ts","../src/actions/run-down.ts","../src/actions/run-single.ts","../src/actions/run-up.ts","../src/actions/select-node.ts","../src/actions/show-result.ts","../src/actions/stop-all.ts","../src/actions/stop-run.ts","../src/actions/continue-run.ts","../src/actions/tidy-layout.ts","../src/actions/toggle-selection.ts","../src/actions/update-node-data.ts","../src/actions/zoom-in.ts","../src/actions/zoom-out.ts","../src/actions/zoom-to.ts","../src/actions/zoom-to-fit.ts","../src/actions/zoom-to-origin.ts","../src/actions/index.ts","../src/manager/graph-manager.ts","../src/utils/index.ts","../src/request/request.ts","../src/hooks/hooks.ts","../src/data/data-service.ts","../src/shapes/node.tsx","../src/shapes/descriptions.tsx","../src/component/ellipsis-middle/index.tsx","../src/shapes/utils.ts","../src/shapes/node-icon.tsx","../src/shapes/edge.ts","../src/shapes/connector.ts","../src/index.ts"],"sourcesContent":["import type { DAGProtocol } from './protocol';\n\nexport default class DAGContext {\n  context: DAGProtocol;\n\n  constructor(context: DAGProtocol) {\n    this.context = context;\n  }\n}\n","import type { Graph } from '@antv/x6';\n\nimport type { DAGProtocol } from '@/protocol';\n\nexport enum ActionType {\n  render = 'render',\n  addNode = 'addNode',\n  addEdge = 'addEdge',\n  moveNode = 'moveNode',\n  removeCell = 'removeCell',\n  dragNode = 'dragNode',\n  updateEdge = 'updateEdge',\n\n  clearStatus = 'clearStatus',\n  queryStatus = 'queryStatus',\n\n  runAll = 'runAll',\n  runSingle = 'runSingle',\n  runDown = 'runDown',\n  runUp = 'runUp',\n  stopRun = 'stopRun',\n  stopAll = 'stopAll',\n  continueRun = 'continueRun',\n\n  copy = 'copy',\n  paste = 'paste',\n\n  zoomIn = 'zoomIn',\n  zoomOut = 'zoomOut',\n  zoomToFit = 'zoomToFit',\n  zoomToOrigin = 'zoomToOrigin',\n  zoomTo = 'zoomTo',\n\n  selectNode = 'selectNode',\n  toggleSelection = 'toggleSelection',\n  centerNode = 'centerNode',\n  showResult = 'showResult',\n\n  changeStyles = 'changeStyles',\n  changeNodeData = 'changeNodeData',\n  tidyLayout = 'tidyLayout',\n\n  changeStatus = 'changeStatus',\n}\n\nexport type HotKey = { key: string | string[]; text: string };\n\nexport interface ActionFactory {\n  new (context?: DAGProtocol): ActionProtocol;\n}\n\nexport interface ActionProtocol {\n  type: ActionType;\n  label: string;\n  hotKey?: HotKey;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  handle: (graph: Graph, dagId: string, ...args: any[]) => any;\n  cancel?: () => void;\n}\n\nexport type { DAGProtocol };\n","import type { Graph, Edge } from '@antv/x6';\n\nimport DAGContext from '../context';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport class AddEdgeAction extends DAGContext implements ActionProtocol {\n  type = ActionType.addEdge;\n  label = '添加边';\n\n  handle(graph: Graph, dagId: string, edge: Edge) {\n    const sourceId = edge.getSourceCellId();\n    const targetId = edge.getTargetCellId();\n    const sourcePortId = edge.getSourcePortId();\n    const targetPortId = edge.getTargetPortId();\n    if (sourcePortId && targetPortId) {\n      const edgeId = `${sourcePortId}__${targetPortId}`;\n      const meta = {\n        id: edgeId,\n        source: sourceId,\n        target: targetId,\n        sourceAnchor: sourcePortId,\n        targetAnchor: targetPortId,\n      };\n      const realEdge = graph.createEdge({\n        shape: 'dag-edge',\n        id: edgeId,\n        source: {\n          cell: sourceId,\n          port: sourcePortId,\n        },\n        target: {\n          cell: targetId,\n          port: targetPortId,\n        },\n        data: {\n          id: edge.id,\n          source: sourceId,\n          sourceAnchor: sourcePortId,\n          target: targetId,\n          targetAnchor: targetPortId,\n        },\n        zIndex: -1,\n      });\n      edge.remove();\n      graph.addEdge(realEdge);\n      this.context.dataService.addEdges([meta]);\n    }\n  }\n}\n","import type { Graph, Node } from '@antv/x6';\n\nimport DAGContext from '../context';\nimport type { GraphNode } from '../types';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport class AddNodeAction extends DAGContext implements ActionProtocol {\n  type = ActionType.addNode;\n  label = '添加节点';\n\n  handle(graph: Graph, dagId: string, node: Node) {\n    const nodeData = node.getData<GraphNode>();\n    const pos = node.position();\n    const meta: GraphNode = {\n      id: nodeData.id,\n      codeName: nodeData.codeName,\n      label: nodeData.label,\n      x: pos.x,\n      y: pos.y,\n      status: nodeData.status,\n    };\n    this.context.dataService.addNodes([meta]);\n  }\n}\n","import type { Graph } from '@antv/x6';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport class CenterNodeAction implements ActionProtocol {\n  type = ActionType.centerNode;\n  label = '居中';\n\n  handle(graph: Graph, dagId: string, nodeId?: string) {\n    if (!nodeId) {\n      graph.centerContent();\n    } else {\n      graph.centerCell(graph.getCellById(nodeId));\n    }\n  }\n}\n","import type { Graph } from '@antv/x6';\n\nimport type { NodeStatus } from '../..';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\n// 直接改变单个节点状态, 不包括相关\nexport class ChangeStatusAction implements ActionProtocol {\n  type = ActionType.changeStatus;\n  label = '改变节点状态';\n\n  handle(graph: Graph, dagId: string, node: { nodeId: string; status: NodeStatus }) {\n    this.changeNodeStatus(node, graph);\n  }\n\n  changeNodeStatus(node: { nodeId: string; status: NodeStatus }, graph: Graph) {\n    const { nodeId, status } = node;\n    const graphNode = graph.getCellById(nodeId);\n    if (node) {\n      graphNode.setData({\n        ...graphNode.getData(),\n        status,\n      });\n    }\n  }\n}\n","import type { Graph } from '@antv/x6';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport class ChangeStylesAction implements ActionProtocol {\n  type = ActionType.changeStyles;\n  label = '改变样式';\n\n  timer = 0;\n\n  handle(\n    graph: Graph,\n    dagId: string,\n    nodeStyles: { nodeId: string; styles: { isOpaque: boolean } }[],\n  ) {\n    this.changeNodesStyle(nodeStyles, graph);\n  }\n\n  changeNodesStyle(\n    nodeStyles: { nodeId: string; styles: { isOpaque: boolean } }[],\n    graph: Graph,\n  ) {\n    nodeStyles?.forEach(({ nodeId, styles }) => {\n      const node = graph.getCellById(nodeId);\n      if (node) {\n        node.setData({\n          ...node.getData(),\n          styles,\n        });\n      }\n    });\n  }\n}\n","import type { Node, Cell, Edge } from '@antv/x6';\n\nexport enum NodeStatus {\n  success,\n  running,\n  failed,\n  pending, // intialized\n  default, // staging\n  stopped,\n  unfinished, // 待配置\n}\n\nexport type GraphNodeOutput = {\n  type: string;\n  name: string;\n  id: string;\n};\n\nexport type GraphNode = {\n  codeName: string;\n  id: string;\n  taskId: string;\n  label: string;\n  x: number;\n  y: number;\n  status: NodeStatus;\n  //node meta info and attrs\n  nodeDef?: any;\n  outputs?: GraphNodeOutput[];\n  styles?: {\n    isOpaque?: boolean;\n    isHighlighted?: boolean;\n    isContinueRun?: boolean;\n    nodeParties?: {\n      nodeId: string;\n      nodeName: string;\n    }[];\n  };\n};\n\nexport type GraphEdge = {\n  id: string;\n  source: string;\n  sourceAnchor: string;\n  target: string;\n  targetAnchor: string;\n  styles?: {\n    isOpaque?: boolean;\n  };\n};\n\nexport type GraphPort = {\n  id: string;\n  group: string;\n  type: string[] | string;\n  attrs?: {\n    circle: {\n      magnet: boolean;\n    };\n  };\n};\n\nexport type GraphModel = {\n  nodes: GraphNode[];\n  edges: GraphEdge[];\n};\n\nexport type { Cell, Node, Edge } from '@antv/x6';\n\nexport interface GraphEventHandlerFactory {\n  new (): GraphEventHandlerProtocol;\n}\n\nexport interface GraphEventHandlerProtocol {\n  onNodeClick?: (node: Node) => void;\n  onBlankClick?: () => void;\n  onGraphScale?: (zoom: number) => void;\n  onSelectionChanged?: (cells: Cell[]) => void;\n  onEdgeRemoved?: (edge?: Edge) => void;\n  onResultClick?: (graphId: string, outputId: string, codeName: string) => void;\n  onNodeRunning?: (isRunning: boolean) => void;\n  onCopyActionChange?: (isCopied: boolean) => void;\n  onNodeStatusChanged?: (status: { nodeId: string; status: NodeStatus }[]) => void;\n  onEdgeConnected?: (edge: Edge) => void;\n  onNodesPasted?: (nodes: Node[]) => void;\n}\n","import type { Graph } from '@antv/x6';\n\nimport { NodeStatus } from '../types';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport class ClearStatusAction implements ActionProtocol {\n  type = ActionType.clearStatus;\n  label = '清除运行状态';\n\n  handle(graph: Graph) {\n    const nodes = graph.getNodes();\n    nodes.forEach((node) => {\n      node.setData({\n        ...node.getData(),\n        status: NodeStatus.default,\n      });\n    });\n    const edges = graph.getEdges();\n    edges.forEach((edge) => {\n      edge.attr('line/strokeDasharray', '');\n      edge.attr('line/style/animation', '');\n    });\n  }\n}\n","import type { Graph, Node, Edge } from '@antv/x6';\nimport { message } from 'antd';\n\nimport DAGContext from '../context';\nimport { isWindows } from '../utils/platform';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport const copyActionHotKey = {\n  key: isWindows ? 'ctrl+c' : 'cmd+c',\n  text: isWindows ? 'Ctrl C' : '⌘ C',\n};\n\nconst DAG_COPY_CONTENT = 'DAG_COPY_CONTENT';\n\nexport class CopyAction extends DAGContext implements ActionProtocol {\n  type = ActionType.copy;\n  label = '复制';\n  hotKey = copyActionHotKey;\n\n  handle(graph: Graph, dagId: string, nodeIds: string[] = [], edgeIds: string[] = []) {\n    const nodes: Node[] = nodeIds.map((id) => graph.getCellById(id) as Node);\n    const edges: Edge[] = edgeIds.map((id) => graph.getCellById(id) as Edge);\n\n    const nodesData = nodes.map((node) => node.getData());\n\n    // filter unconnected edges\n    const edgesData = edges.filter((edge) => {\n      const edgeData = edge.getData();\n      return (\n        nodesData.find((node) => node.id === edgeData.source) &&\n        nodesData.find((node) => node.id === edgeData.target)\n      );\n    });\n\n    const data = {\n      nodes: nodes.map((node) => node.toJSON()),\n      edges: edgesData.map((edge) => edge.toJSON()),\n    };\n    localStorage.setItem(DAG_COPY_CONTENT, JSON.stringify(data));\n    const events = this.context.EventHub.getData();\n    for (const event of events) {\n      if (event.onCopyActionChange) {\n        event.onCopyActionChange(true);\n      }\n    }\n    message.success('复制成功');\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nconst LANGUAGE_DEFAULT = 'en';\n\nlet _isWindows = false;\nlet _isMacintosh = false;\nlet _isLinux = false;\nlet _isLinuxSnap = false;\nlet _isNative = false;\nlet _isWeb = false;\nlet _isIOS = false;\nlet _locale: string | undefined;\nlet _language: string = LANGUAGE_DEFAULT;\nlet _translationsConfigFile: string | undefined;\nlet _userAgent: string | undefined;\n\nlet _isIE = false;\nlet _isEdge = false;\nlet _isOpera = false;\nlet _isFirefox = false;\nlet _isWebKit = false;\nlet _isChrome = true;\nlet _isSafari = false;\nlet _isIPad = false;\n\ninterface NLSConfig {\n  locale: string;\n  availableLanguages: Record<string, string>;\n  _translationsConfigFile: string;\n}\n\nexport type IProcessEnvironment = Record<string, string>;\n\nexport interface INodeProcess {\n  platform: 'win32' | 'linux' | 'darwin';\n  env: IProcessEnvironment;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  nextTick: Function;\n  versions?: {\n    electron?: string;\n  };\n  sandboxed?: boolean; // Electron\n  type?: string;\n  cwd: () => string;\n}\ndeclare const process: INodeProcess;\ndeclare const global: any;\n\ninterface INavigator {\n  userAgent: string;\n  language: string;\n  maxTouchPoints?: number;\n}\ndeclare const navigator: INavigator;\ndeclare const self: any;\n\nconst _globals =\n  typeof self === 'object' ? self : typeof global === 'object' ? global : ({} as any);\n\nlet nodeProcess: INodeProcess | undefined;\nif (typeof process !== 'undefined') {\n  // Native environment (non-sandboxed)\n  nodeProcess = process;\n} else if (typeof _globals.vscode !== 'undefined') {\n  // Native environment (sandboxed)\n  nodeProcess = _globals.vscode.process;\n}\n\nconst isElectronRenderer =\n  typeof nodeProcess?.versions?.electron === 'string' &&\n  nodeProcess.type === 'renderer';\nexport const isElectronSandboxed = isElectronRenderer && nodeProcess?.sandboxed;\nexport const browserCodeLoadingCacheStrategy:\n  | 'none'\n  | 'code'\n  | 'bypassHeatCheck'\n  | 'bypassHeatCheckAndEagerCompile'\n  | undefined = (() => {\n  // Always enabled when sandbox is enabled\n  if (isElectronSandboxed) {\n    return 'bypassHeatCheck';\n  }\n\n  // Otherwise, only enabled conditionally\n  const env = nodeProcess?.env.ENABLE_VSCODE_BROWSER_CODE_LOADING;\n  if (typeof env === 'string') {\n    if (\n      env === 'none' ||\n      env === 'code' ||\n      env === 'bypassHeatCheck' ||\n      env === 'bypassHeatCheckAndEagerCompile'\n    ) {\n      return env;\n    }\n\n    return 'bypassHeatCheck';\n  }\n\n  return undefined;\n})();\nexport const isPreferringBrowserCodeLoad =\n  typeof browserCodeLoadingCacheStrategy === 'string';\n\n// Web environment\nif (typeof navigator === 'object' && !isElectronRenderer) {\n  _userAgent = navigator.userAgent;\n  _isWindows = _userAgent.indexOf('Windows') >= 0;\n  _isMacintosh = _userAgent.indexOf('Macintosh') >= 0;\n  _isIOS =\n    (_userAgent.indexOf('Macintosh') >= 0 ||\n      _userAgent.indexOf('iPad') >= 0 ||\n      _userAgent.indexOf('iPhone') >= 0) &&\n    !!navigator.maxTouchPoints &&\n    navigator.maxTouchPoints > 0;\n  _isLinux = _userAgent.indexOf('Linux') >= 0;\n  _isWeb = true;\n  _locale = navigator.language;\n  _language = _locale;\n  _isIE = _userAgent.indexOf('Trident') >= 0;\n  _isEdge = _userAgent.indexOf('Edge/') >= 0;\n  _isOpera = _userAgent.indexOf('Opera') >= 0;\n  _isFirefox = _userAgent.indexOf('Firefox') >= 0;\n  _isWebKit = _userAgent.indexOf('AppleWebKit') >= 0;\n  _isChrome = _userAgent.indexOf('Chrome') >= 0;\n  _isSafari = _userAgent.indexOf('Chrome') === -1 && _userAgent.indexOf('Safari') >= 0;\n  _isIPad = _userAgent.indexOf('iPad') >= 0;\n}\n\n// Native environment\nelse if (typeof nodeProcess === 'object') {\n  _isWindows = nodeProcess.platform === 'win32';\n  _isMacintosh = nodeProcess.platform === 'darwin';\n  _isLinux = nodeProcess.platform === 'linux';\n  _isLinuxSnap = _isLinux && !!nodeProcess.env.SNAP && !!nodeProcess.env.SNAP_REVISION;\n  _locale = LANGUAGE_DEFAULT;\n  _language = LANGUAGE_DEFAULT;\n  const rawNlsConfig = nodeProcess.env.VSCODE_NLS_CONFIG;\n  if (rawNlsConfig) {\n    try {\n      const nlsConfig: NLSConfig = JSON.parse(rawNlsConfig);\n      const resolved = nlsConfig.availableLanguages['*'];\n      _locale = nlsConfig.locale;\n      // VSCode's default language is 'en'\n      _language = resolved || LANGUAGE_DEFAULT;\n      _translationsConfigFile = nlsConfig._translationsConfigFile;\n    } catch (e) {\n      //\n    }\n  }\n  _isNative = true;\n}\n\n// Unknown environment\nelse {\n  console.error('Unable to resolve platform.');\n}\n\nexport enum Platform {\n  Web,\n  Mac,\n  Linux,\n  Windows,\n}\nexport function PlatformToString(platform: Platform) {\n  switch (platform) {\n    case Platform.Web:\n      return 'Web';\n    case Platform.Mac:\n      return 'Mac';\n    case Platform.Linux:\n      return 'Linux';\n    case Platform.Windows:\n      return 'Windows';\n  }\n}\n\nlet _platform: Platform = Platform.Web;\nif (_isMacintosh) {\n  _platform = Platform.Mac;\n} else if (_isWindows) {\n  _platform = Platform.Windows;\n} else if (_isLinux) {\n  _platform = Platform.Linux;\n}\n\nexport const isWindows = _isWindows;\nexport const isMacintosh = _isMacintosh;\nexport const isOSX = _isMacintosh;\nexport const isLinux = _isLinux;\nexport const isLinuxSnap = _isLinuxSnap;\nexport const isNative = _isNative;\nexport const isWeb = _isWeb;\nexport const isIOS = _isIOS;\nexport const platform = _platform;\nexport const userAgent = _userAgent;\n\nexport const isIE = _isIE;\nexport const isEdge = _isEdge;\nexport const isEdgeOrIE = isIE || isEdge;\nexport const isOpera = _isOpera;\nexport const isFirefox = _isFirefox;\nexport const isWebKit = _isWebKit;\nexport const isChrome = _isChrome;\nexport const isSafari = _isSafari;\nexport const isIPad = _isIPad;\n\n/**\n * The language used for the user interface. The format of\n * the string is all lower case (e.g. zh-tw for Traditional\n * Chinese)\n */\nexport const language = _language;\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Language {\n  export function value(): string {\n    return language;\n  }\n\n  export function isDefaultVariant(): boolean {\n    if (language.length === 2) {\n      return language === 'en';\n    }\n    if (language.length >= 3) {\n      return language[0] === 'e' && language[1] === 'n' && language[2] === '-';\n    }\n    return false;\n  }\n\n  export function isDefault(): boolean {\n    return language === 'en';\n  }\n}\n\n/**\n * The OS locale or the locale specified by --locale. The format of\n * the string is all lower case (e.g. zh-tw for Traditional\n * Chinese). The UI is not necessarily shown in the provided locale.\n */\nexport const locale = _locale;\n\n/**\n * The translatios that are available through language packs.\n */\nexport const translationsConfigFile = _translationsConfigFile;\n\nexport const globals: any = _globals;\n\nexport enum OperatingSystem {\n  Windows = 1,\n  Macintosh = 2,\n  Linux = 3,\n}\nexport const OS =\n  _isMacintosh || _isIOS\n    ? OperatingSystem.Macintosh\n    : _isWindows\n    ? OperatingSystem.Windows\n    : OperatingSystem.Linux;\n\nlet _isLittleEndian = true;\nlet _isLittleEndianComputed = false;\nexport function isLittleEndian(): boolean {\n  if (!_isLittleEndianComputed) {\n    _isLittleEndianComputed = true;\n    const test = new Uint8Array(2);\n    test[0] = 1;\n    test[1] = 2;\n    const view = new Uint16Array(test.buffer);\n    _isLittleEndian = view[0] === (2 << 8) + 1;\n  }\n  return _isLittleEndian;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isBasicWasmSupported = typeof (window as any).WebAssembly !== 'undefined';\n","import type { Graph } from '@antv/x6';\nimport { Dnd } from '@antv/x6-plugin-dnd';\n\nimport DAGContext from '../context';\nimport type { GraphNode } from '../types';\nimport { NodeStatus } from '../types';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport class DragNodeAction extends DAGContext implements ActionProtocol {\n  type = ActionType.dragNode;\n  label = '拖拽节点';\n  dnd: Dnd | null = null;\n\n  async handle(\n    graph: Graph,\n    dagId: string,\n    nodeData: Pick<GraphNode, 'codeName' | 'label' | 'status'>,\n    e: MouseEvent,\n  ) {\n    if (!this.dnd) {\n      this.dnd = new Dnd({\n        target: graph,\n        getDragNode: (node) => node.clone({ keepId: true }),\n        getDropNode: (node) => node.clone({ keepId: true }),\n      });\n    }\n    const maxNodeIndex = await this.context.requestService.getMaxNodeIndex(dagId);\n    const nodeId = `${dagId}-node-${maxNodeIndex + 1}`;\n    const { label, codeName, status } = nodeData;\n    const outputs = await this.context.hookService.createResult(nodeId, codeName);\n    const ports = await this.context.hookService.createPort(nodeId, codeName);\n    const node = graph.createNode({\n      id: nodeId,\n      shape: 'dag-node',\n      ports,\n      data: {\n        id: nodeId,\n        codeName,\n        label,\n        status: status || NodeStatus.default,\n        outputs,\n      },\n    });\n    this.dnd.start(node, e);\n  }\n\n  cancel() {\n    if (this.dnd) {\n      this.dnd.dispose();\n      this.dnd = null;\n    }\n  }\n}\n","import type { Graph, Node } from '@antv/x6';\n\nimport DAGContext from '../context';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport class MoveNodeAction extends DAGContext implements ActionProtocol {\n  type = ActionType.moveNode;\n  label = '移动节点';\n\n  handle(graph: Graph, dagId: string, node: Node) {\n    const { x, y } = node.position();\n    this.context.dataService.changeNode([\n      {\n        nodeId: node.id,\n        meta: {\n          x,\n          y,\n        },\n      },\n    ]);\n  }\n}\n","import type { Graph, Node, Edge } from '@antv/x6';\n\nimport DAGContext from '../context';\nimport { NodeStatus } from '../types';\nimport { isWindows } from '../utils/platform';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport const pasteActionHotKey = {\n  key: isWindows ? 'ctrl+v' : 'cmd+v',\n  text: isWindows ? 'Ctrl V' : '⌘ V',\n};\n\nconst DAG_COPY_CONTENT = 'DAG_COPY_CONTENT';\n\nexport class PasteAction extends DAGContext implements ActionProtocol {\n  type = ActionType.paste;\n  label = '粘贴';\n  hotKey = pasteActionHotKey;\n\n  async handle(graph: Graph, dagId: string) {\n    const strDta = localStorage.getItem(DAG_COPY_CONTENT);\n    if (!strDta) {\n      return;\n    }\n\n    const data: {\n      nodes: Node.Properties[];\n      edges: Edge.Properties[];\n    } = JSON.parse(strDta);\n\n    const maxNodeIndex = await this.context.requestService.getMaxNodeIndex(dagId);\n\n    const fixNodeIds: Record<string, string> = {};\n    data.nodes.forEach((node, index) => {\n      const nextNodeId = `${dagId}-node-${maxNodeIndex + index + 1}`;\n      fixNodeIds[node.id!] = nextNodeId;\n      node.data.status =\n        node.data.status === NodeStatus.unfinished\n          ? NodeStatus.unfinished\n          : NodeStatus.default;\n      const { x, y } = node.position!;\n      node.position = { x: x + 32, y: y + 32 };\n    });\n\n    let str = JSON.stringify(data);\n    Object.keys(fixNodeIds).forEach((nodeId) => {\n      str = str.replace(new RegExp(`\"${nodeId}\"`, 'g'), `\"${fixNodeIds[nodeId]}\"`);\n      str = str.replace(new RegExp(`${nodeId}-`, 'g'), `${fixNodeIds[nodeId]}-`);\n    });\n\n    const fixedData: {\n      nodes: Node.Properties[];\n      edges: Edge.Properties[];\n    } = JSON.parse(str);\n    graph.addNodes(fixedData.nodes, { dry: true });\n    graph.addEdges(fixedData.edges, { dry: true });\n    graph.resetSelection(fixedData.nodes.map((n) => n.id!));\n\n    const nodes = fixedData.nodes.map((node) => ({\n      id: node.data.id,\n      codeName: node.data.codeName,\n      label: node.data.label,\n      x: node.position!.x,\n      y: node.position!.y,\n      status:\n        node.data.status === NodeStatus.unfinished\n          ? NodeStatus.default\n          : node.data.status,\n      nodeDef: node.data.nodeDef,\n    }));\n    await this.context.dataService.addNodes(nodes);\n\n    await this.context.dataService.addEdges(\n      fixedData.edges.map((edge) => ({\n        id: edge.data.id,\n        source: edge.data.source,\n        target: edge.data.target,\n        sourceAnchor: edge.data.sourceAnchor,\n        targetAnchor: edge.data.targetAnchor,\n      })),\n    );\n\n    const events = this.context.EventHub.getData();\n    for (const event of events) {\n      if (event.onNodesPasted) {\n        event.onNodesPasted(nodes);\n      }\n    }\n  }\n}\n","import type { Graph } from '@antv/x6';\n\nimport DAGContext from '../context';\nimport { NodeStatus } from '../types';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport class QueryStatusAction extends DAGContext implements ActionProtocol {\n  type = ActionType.queryStatus;\n  label = '查询运行状态';\n\n  timer = 0;\n\n  async handle(graph: Graph, dagId: string) {\n    await this.queryStatus(graph, dagId);\n  }\n\n  cancel() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n      this.timer = 0;\n    }\n  }\n\n  async queryStatus(graph: Graph, dagId: string) {\n    const events = this.context.EventHub.getData();\n\n    const { nodeStatus, finished } = await this.context.requestService.queryStatus(\n      dagId,\n    );\n\n    this.changeNodesStatus(nodeStatus, graph);\n\n    const isRunning = !finished;\n    // for (let i = 0, len = nodeStatus.length; i < len; i += 1) {\n    //   const { status } = nodeStatus[i];\n    //   if (status === NodeStatus.running || status === NodeStatus.pending) {\n    //     isRunning = true;\n    //     break;\n    //   }\n    // }\n\n    if (isRunning) {\n      this.timer = window.setTimeout(() => {\n        this.queryStatus(graph, dagId);\n      }, 2000);\n\n      for (const event of events) {\n        if (event.onNodeRunning) {\n          event.onNodeRunning(true);\n        }\n\n        if (event.onNodeStatusChanged) {\n          event.onNodeStatusChanged(nodeStatus);\n        }\n      }\n    } else {\n      for (const event of events) {\n        if (event.onNodeRunning) {\n          event.onNodeRunning(false);\n        }\n\n        if (event.onNodeStatusChanged) {\n          event.onNodeStatusChanged(nodeStatus);\n        }\n      }\n    }\n  }\n\n  changeNodesStatus(\n    nodeStatus: { nodeId: string; status: NodeStatus }[],\n    graph: Graph,\n  ) {\n    nodeStatus.forEach(({ nodeId, status }) => {\n      const node = graph.getCellById(nodeId);\n      if (node) {\n        node.setData({\n          ...node.getData(),\n          status,\n        });\n        const edges = graph.getIncomingEdges(nodeId);\n        edges?.forEach((edge) => {\n          const sourceNodeId = edge.getSourceCellId();\n          if (sourceNodeId) {\n            const sourceNode = nodeStatus.find((item) => item.nodeId === sourceNodeId);\n            if (sourceNode && sourceNode.status === NodeStatus.success) {\n              this.changeEdgeStatus(graph, edge.id, status);\n            }\n          }\n        });\n      }\n    });\n  }\n\n  changeEdgeStatus(graph: Graph, edgeId: string, status: NodeStatus) {\n    const edge = graph.getCellById(edgeId);\n    if (edge) {\n      if (status === NodeStatus.running) {\n        edge.attr('line/strokeDasharray', 5);\n        edge.attr('line/stroke', '#1890ff');\n        edge.attr('line/strokeWidth', '2');\n        edge.attr('line/style/animation', 'ant-line 30s infinite linear');\n      } else if (status === NodeStatus.success || status === NodeStatus.failed) {\n        edge.attr('line/strokeDasharray', '');\n        edge.attr('line/style/animation', '');\n        edge.attr('line/strokeWidth', '1.5');\n        edge.attr('line/stroke', '#c2c8d5');\n      } else {\n        edge.attr('line/strokeDasharray', '');\n        edge.attr('line/style/animation', '');\n        edge.attr('line/strokeWidth', '1');\n        edge.attr('line/stroke', '#c2c8d5');\n      }\n    }\n  }\n}\n","import type { Graph } from '@antv/x6';\n\nimport DAGContext from '../context';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport const removeCellActionHotKey = {\n  key: ['delete', 'backspace'],\n  text: 'Delete',\n};\nexport class RemoveCellAction extends DAGContext implements ActionProtocol {\n  type = ActionType.removeCell;\n  label = '删除';\n  hotKey = removeCellActionHotKey;\n\n  handle(graph: Graph, dagId: string, nodeIds: string[] = [], edgeIds: string[] = []) {\n    nodeIds.forEach((nodeId) => {\n      const node = graph.getCellById(nodeId);\n      if (node) {\n        const connectedEdges = graph.getConnectedEdges(node);\n        connectedEdges.forEach((c) => {\n          edgeIds.push(c.id);\n        });\n      }\n    });\n    if (nodeIds.length > 0 || edgeIds.length > 0) {\n      graph.removeCells([...nodeIds, ...edgeIds]);\n      this.context.dataService.removeNodesOrEdges(nodeIds, edgeIds);\n    }\n  }\n}\n","import type { Graph } from '@antv/x6';\n\nimport DAGContext from '../context';\nimport type { GraphNode, GraphEdge } from '../types';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport class RenderAction extends DAGContext implements ActionProtocol {\n  type = ActionType.render;\n  label = 'render';\n\n  async handle(graph: Graph) {\n    const { nodes, edges } = await this.context.dataService.fetch();\n    if (nodes.length > 0) graph.drawBackground();\n    graph.clearCells();\n    const x6Nodes = await Promise.all(\n      nodes.map(async (node) => await this.createX6Node(node)),\n    );\n    const x6Edges = edges.map((edge) => this.createX6Edge(edge));\n    graph.addNodes(x6Nodes, { dry: true });\n    graph.addEdges(x6Edges, { dry: true });\n    graph.zoomToFit({ maxScale: 1, minScale: 0.6 });\n    graph.centerContent();\n  }\n\n  async createX6Node(node: GraphNode) {\n    const outputs = await this.context.hookService.createResult(node.id, node.codeName);\n    const ports = await this.context.hookService.createPort(node.id, node.codeName);\n    return {\n      id: node.id,\n      x: node.x,\n      y: node.y,\n      shape: 'dag-node',\n      data: {\n        id: node.id,\n        codeName: node.codeName,\n        label: node.label,\n        status: node.status,\n        outputs,\n        styles: node.styles,\n        nodeDef: node.nodeDef,\n      },\n      ports,\n    };\n  }\n\n  createX6Edge(edge: GraphEdge) {\n    return {\n      shape: 'dag-edge',\n      id: edge.id,\n      source: {\n        cell: edge.source,\n        port: edge.sourceAnchor,\n      },\n      target: {\n        cell: edge.target,\n        port: edge.targetAnchor,\n      },\n      data: {\n        id: edge.id,\n        source: edge.source,\n        sourceAnchor: edge.sourceAnchor,\n        target: edge.target,\n        targetAnchor: edge.targetAnchor,\n      },\n      attrs: {\n        line: {\n          stroke: '#C2C8D5',\n          strokeWidth: 1,\n          targetMarker: null,\n          opacity: edge?.styles?.isOpaque ? 0.25 : 1,\n        },\n      },\n      zIndex: -1,\n    };\n  }\n}\n","import type { Graph } from '@antv/x6';\n\nimport DAGContext from '../context';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport class RunAllAction extends DAGContext implements ActionProtocol {\n  type = ActionType.runAll;\n  label = '全部运行';\n\n  handle = async (graph: Graph, dagId: string) => {\n    const nodeIds = graph.getNodes().map((node) => node.id);\n    return await this.context.requestService.startRun(dagId, nodeIds);\n  };\n}\n","import type { Graph } from '@antv/x6';\n\nimport DAGContext from '../context';\nimport { isWindows } from '../utils/platform';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport const runDownActionHotKey = {\n  key: isWindows ? 'ctrl+down' : 'cmd+down',\n  text: isWindows ? 'Ctrl ↓' : '⌘ ↓',\n};\n\nexport class RunDownAction extends DAGContext implements ActionProtocol {\n  type = ActionType.runDown;\n  label = '开始执行';\n  hotKey = runDownActionHotKey;\n\n  handle = async (graph: Graph, dagId: string, nodeId: string[]) => {\n    if (!nodeId || nodeId.length === 0) return;\n    const events = this.context.EventHub.getData();\n    for (const event of events) {\n      if (event.onBlankClick) {\n        event.onBlankClick();\n      }\n    }\n\n    const nodeIds = this.getSubGraph(graph, nodeId[0]);\n    this.context.requestService.startRun(dagId, Array.from(nodeIds));\n  };\n\n  getSubGraph(graph: Graph, nodeId: string, nodeIds: Set<string> = new Set()) {\n    nodeIds.add(nodeId);\n    const outgoingEdges = graph.getOutgoingEdges(nodeId);\n    outgoingEdges?.forEach((edge) => {\n      const data = edge.getData();\n      const { target } = data;\n      this.getSubGraph(graph, target, nodeIds);\n    });\n    return nodeIds;\n  }\n}\n","import type { Graph } from '@antv/x6';\n\nimport DAGContext from '../context';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport const runSingleActionHotKey = {\n  key: 'enter',\n  text: 'Enter',\n};\nexport class RunSingleAction extends DAGContext implements ActionProtocol {\n  type = ActionType.runSingle;\n  label = '执行单节点';\n  hotKey = runSingleActionHotKey;\n\n  handle = async (graph: Graph, dagId: string, nodeIds: string[]) => {\n    if (!nodeIds || nodeIds.length === 0) return;\n\n    const events = this.context.EventHub.getData();\n    for (const event of events) {\n      if (event.onBlankClick) {\n        event.onBlankClick();\n      }\n    }\n\n    await this.context.requestService.startRun(dagId, nodeIds);\n  };\n}\n","import type { Graph } from '@antv/x6';\n\nimport DAGContext from '../context';\nimport { isWindows } from '../utils/platform';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport const runUpActionHotKey = {\n  key: isWindows ? 'ctrl+up' : 'cmd+up',\n  text: isWindows ? 'Ctrl ↑' : '⌘ ↑',\n};\nexport class RunUpAction extends DAGContext implements ActionProtocol {\n  type = ActionType.runUp;\n  label = '执行到此';\n  hotKey = runUpActionHotKey;\n\n  handle = async (graph: Graph, dagId: string, nodeId: string[]) => {\n    if (!nodeId || nodeId.length === 0) return;\n    const events = this.context.EventHub.getData();\n    for (const event of events) {\n      if (event.onBlankClick) {\n        event.onBlankClick();\n      }\n    }\n    const nodeIds = this.getSuperGraph(graph, nodeId[0]);\n    await this.context.requestService.startRun(dagId, Array.from(nodeIds));\n  };\n\n  getSuperGraph(graph: Graph, nodeId: string, nodeIds: Set<string> = new Set()) {\n    nodeIds.add(nodeId);\n    const incomingEdges = graph.getIncomingEdges(nodeId);\n    incomingEdges?.forEach((edge) => {\n      const data = edge.getData();\n      const { source } = data;\n      this.getSuperGraph(graph, source, nodeIds);\n    });\n    return nodeIds;\n  }\n}\n","import type { Graph } from '@antv/x6';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport class SelectNodeAction implements ActionProtocol {\n  type = ActionType.selectNode;\n  label = '选择';\n\n  handle(graph: Graph, dagId: string, nodeId: string) {\n    graph.resetSelection(nodeId);\n  }\n}\n","import type { Graph } from '@antv/x6';\n\nimport DAGContext from '../context';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport class ShowResultAction extends DAGContext implements ActionProtocol {\n  type = ActionType.showResult;\n  label = '展示结果';\n\n  async handle(graph: Graph, dagId: string, outputId: string, codeName: string) {\n    const events = this.context.EventHub.getData();\n    for (const event of events) {\n      if (event.onResultClick) {\n        event.onResultClick(dagId, outputId, codeName);\n      }\n    }\n  }\n}\n","import type { Graph } from '@antv/x6';\n\nimport DAGContext from '../context';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport class StopAllAction extends DAGContext implements ActionProtocol {\n  type = ActionType.stopAll;\n  label = '停止全部';\n\n  handle = async (graph: Graph, dagId: string, nodeId: string[]) => {\n    return await this.context.requestService.stopRun(dagId);\n  };\n}\n","import type { Graph } from '@antv/x6';\n\nimport DAGContext from '../context';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport class StopRunAction extends DAGContext implements ActionProtocol {\n  type = ActionType.stopRun;\n  label = '停止执行';\n\n  handle = async (graph: Graph, dagId: string, nodeId: string) => {\n    await this.context.requestService.stopRun(dagId, nodeId);\n  };\n}\n","import type { Graph } from '@antv/x6';\n\nimport DAGContext from '../context';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport class ContinueRunAction extends DAGContext implements ActionProtocol {\n  type = ActionType.continueRun;\n  label = '继续执行';\n\n  handle = async (graph: Graph, dagId: string, nodeId: string) => {\n    await this.context.requestService.continueRun(dagId, nodeId);\n  };\n}\n","import { DagreLayout } from '@antv/layout';\nimport type { Graph } from '@antv/x6';\n\nimport DAGContext from '../context';\nimport { isWindows } from '../utils/platform';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport const tidyLayoutActionHotKey = {\n  key: isWindows ? 'ctrl+l' : 'cmd+l',\n  text: isWindows ? 'Ctrl L' : '⌘ L',\n};\nexport class TidyLayoutAction extends DAGContext implements ActionProtocol {\n  type = ActionType.tidyLayout;\n  label = '一键整理';\n  hotKey = tidyLayoutActionHotKey;\n\n  handle = (graph: Graph, dagId: string) => {\n    const dargeLayout = new DagreLayout({\n      type: 'dagre',\n      ranksep: 35,\n      nodesep: 15,\n      nodeSize: [180, 36],\n    });\n\n    const model: { nodes: any[]; edges: any[] } = {\n      nodes: [],\n      edges: [],\n    };\n\n    const nodes = graph.getNodes();\n    const edges = graph.getEdges();\n\n    nodes.forEach((node) => {\n      model.nodes.push(node.getData());\n    });\n    edges.forEach((edge) => {\n      model.edges.push(edge.getData());\n    });\n    dargeLayout.layout(model);\n\n    model.nodes.forEach((node) => {\n      const { id } = node;\n      const graphNode = graph.getCellById(id);\n      if (graphNode && graphNode.isNode()) {\n        graphNode.position(node.x, node.y);\n      }\n    });\n    graph.zoomToFit({ maxScale: 1, minScale: 0.2 });\n    graph.centerContent();\n\n    this.context.requestService.saveDag(dagId, model);\n  };\n}\n","import type { Graph } from '@antv/x6';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport const toggleSelectionActionHotKey = {\n  key: '',\n  text: 'Shift + 鼠标左键',\n};\nexport class ToggleSelectionAction implements ActionProtocol {\n  type = ActionType.toggleSelection;\n  label = '切换框选状态';\n  hotKey = toggleSelectionActionHotKey;\n\n  rubberband = false;\n\n  handle = (graph: Graph) => {\n    return this.toggeleSelection(graph);\n  };\n\n  toggeleSelection(graph: Graph) {\n    if (this.rubberband) {\n      this.disableSelection(graph);\n    } else {\n      this.enableSelection(graph);\n    }\n    return this.rubberband;\n  }\n\n  enableSelection = (graph: Graph) => {\n    graph.disablePanning();\n    graph.setRubberbandModifiers(null);\n    this.rubberband = true;\n  };\n\n  disableSelection = (graph: Graph) => {\n    graph.enablePanning();\n    graph.setRubberbandModifiers('shift');\n    this.rubberband = false;\n  };\n}\n","import type { Graph } from '@antv/x6';\n\nimport DAGContext from '../context';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport class ChangeNodeDataAction extends DAGContext implements ActionProtocol {\n  type = ActionType.changeNodeData;\n  label = '改变节点参数';\n  handle(graph: Graph, dagId: string, nodeId: string, option: any) {\n    if (graph) {\n      const node = graph.getCellById(nodeId);\n      if (!node) return;\n      this.context.dataService.changeNode([\n        {\n          nodeId: node.id,\n          meta: option,\n        },\n      ]);\n      node.setData(\n        {\n          ...node.getData(),\n          ...option,\n        },\n        { overwrite: true, silent: true },\n      );\n    }\n  }\n}\n","import type { Graph } from '@antv/x6';\n\nimport { isWindows } from '../utils/platform';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport const zoomInActionHotKey = {\n  key: isWindows ? 'ctrl+=' : 'cmd+=',\n  text: isWindows ? 'Ctrl +' : '⌘ +',\n};\nexport class ZoomInAction implements ActionProtocol {\n  type = ActionType.zoomIn;\n  label = '放大';\n  hotKey = zoomInActionHotKey;\n\n  handle(graph: Graph) {\n    const zoom = graph.zoom();\n    if (zoom < 1.5) {\n      graph.zoom(0.25);\n    }\n    return graph.zoom();\n  }\n}\n","import type { Graph } from '@antv/x6';\n\nimport { isWindows } from '../utils/platform';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport const zoomOutActionHotKey = {\n  key: isWindows ? 'ctrl+-' : 'cmd+-',\n  text: isWindows ? 'Ctrl -' : '⌘ -',\n};\n\nexport class ZoomOutAction implements ActionProtocol {\n  type = ActionType.zoomOut;\n  label = '缩小';\n  hotKey = zoomOutActionHotKey;\n\n  handle(graph: Graph) {\n    const zoom = graph.zoom();\n    if (zoom > 0.5) {\n      graph.zoom(-0.25);\n    }\n    return graph.zoom();\n  }\n}\n","import type { Graph } from '@antv/x6';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport class ZoomToAction implements ActionProtocol {\n  type = ActionType.zoomTo;\n  label = '缩放至';\n\n  handle(graph: Graph, dagId: string, zoom: number) {\n    graph.zoomTo(zoom);\n    return graph.zoom();\n  }\n}\n","import type { Graph } from '@antv/x6';\n\nimport { isWindows } from '../utils/platform';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport const zoomToFitActionHotKey = {\n  key: isWindows ? 'ctrl+p' : 'cmd+p',\n  text: isWindows ? 'Ctrl P' : '⌘ P',\n};\nexport class ZoomToFitAction implements ActionProtocol {\n  type = ActionType.zoomToFit;\n  label = '自适应窗口大小';\n  hotKey = zoomToFitActionHotKey;\n\n  handle = (graph: Graph) => {\n    graph.zoomToFit({ maxScale: 1 });\n    return graph.zoom();\n  };\n}\n","import type { Graph } from '@antv/x6';\n\nimport { isWindows } from '../utils/platform';\n\nimport type { ActionProtocol } from './protocol';\nimport { ActionType } from './protocol';\n\nexport const zoomToOriginActionHotKey = {\n  key: isWindows ? 'ctrl+o' : 'cmd+o',\n  text: isWindows ? 'Ctrl O' : '⌘ O',\n};\nexport class ZoomToOriginAction implements ActionProtocol {\n  type = ActionType.zoomToOrigin;\n  label = '实际像素展示';\n  hotKey = zoomToOriginActionHotKey;\n\n  handle(graph: Graph) {\n    graph.zoomTo(1);\n    return graph.zoom();\n  }\n}\n","import { AddEdgeAction } from './add-edge';\nimport { AddNodeAction } from './add-node';\nimport { CenterNodeAction } from './center-node';\nimport { ChangeStatusAction } from './change-status';\nimport { ChangeStylesAction } from './change-style';\nimport { ClearStatusAction } from './clear-status';\nimport { CopyAction, copyActionHotKey } from './copy';\nimport { DragNodeAction } from './drag-node';\nimport { MoveNodeAction } from './move-node';\nimport { PasteAction, pasteActionHotKey } from './paste';\nimport type { DAGProtocol } from './protocol';\nimport type { ActionFactory } from './protocol';\nimport { QueryStatusAction } from './query-status';\nimport { RemoveCellAction, removeCellActionHotKey } from './remove-cell';\nimport { RenderAction } from './render';\nimport { RunAllAction } from './run-all';\nimport { RunDownAction, runDownActionHotKey } from './run-down';\nimport { RunSingleAction, runSingleActionHotKey } from './run-single';\nimport { RunUpAction, runUpActionHotKey } from './run-up';\nimport { SelectNodeAction } from './select-node';\nimport { ShowResultAction } from './show-result';\nimport { StopAllAction } from './stop-all';\nimport { StopRunAction } from './stop-run';\nimport { ContinueRunAction } from './continue-run';\nimport { TidyLayoutAction, tidyLayoutActionHotKey } from './tidy-layout';\nimport { ToggleSelectionAction, toggleSelectionActionHotKey } from './toggle-selection';\nimport { ChangeNodeDataAction } from './update-node-data';\nimport { ZoomInAction, zoomInActionHotKey } from './zoom-in';\nimport { ZoomOutAction, zoomOutActionHotKey } from './zoom-out';\nimport { ZoomToAction } from './zoom-to';\nimport { ZoomToFitAction, zoomToFitActionHotKey } from './zoom-to-fit';\nimport { ZoomToOriginAction, zoomToOriginActionHotKey } from './zoom-to-origin';\n\nexport * from './protocol';\n\nexport const Actions = [\n  AddEdgeAction,\n  AddNodeAction,\n  ClearStatusAction,\n  CopyAction,\n  DragNodeAction,\n  MoveNodeAction,\n  PasteAction,\n  QueryStatusAction,\n  RemoveCellAction,\n  RenderAction,\n  RunAllAction,\n  RunDownAction,\n  RunSingleAction,\n  RunUpAction,\n  StopRunAction,\n  ContinueRunAction,\n  ZoomInAction,\n  ZoomOutAction,\n  SelectNodeAction,\n  ZoomToFitAction,\n  ZoomToOriginAction,\n  CenterNodeAction,\n  ToggleSelectionAction,\n  ZoomToAction,\n  ShowResultAction,\n  ChangeStylesAction,\n  StopAllAction,\n  TidyLayoutAction,\n  ChangeNodeDataAction,\n  ChangeStatusAction,\n];\n\nexport const HotKeys = {\n  copyActionHotKey,\n  pasteActionHotKey,\n  removeCellActionHotKey,\n  runDownActionHotKey,\n  runSingleActionHotKey,\n  runUpActionHotKey,\n  toggleSelectionActionHotKey,\n  zoomInActionHotKey,\n  zoomOutActionHotKey,\n  zoomToFitActionHotKey,\n  zoomToOriginActionHotKey,\n  tidyLayoutActionHotKey,\n};\n\nexport function createAction(action: ActionFactory, context: DAGProtocol) {\n  return new action(context);\n}\n","import type { Node, EdgeView, Edge } from '@antv/x6';\nimport { Graph } from '@antv/x6';\nimport { Keyboard } from '@antv/x6-plugin-keyboard';\nimport { Selection } from '@antv/x6-plugin-selection';\n\nimport { ActionType } from '../actions';\nimport DAGContext from '../context';\nimport { validateConnection } from '../utils';\n\nimport type { GraphMode } from './protocol';\nimport type { GraphManager } from './protocol';\n\nexport class DefaultGraphManager extends DAGContext implements GraphManager {\n  dagId: string | null = null;\n  graph: Graph | null = null;\n\n  init(\n    dagId: string,\n    graphConfig: Graph.Options,\n    mode: GraphMode = 'FULL',\n    ...args: any[]\n  ) {\n    this.dagId = dagId;\n\n    if (this.graph) {\n      this.graph.dispose();\n      this.graph = null;\n    }\n\n    if (!this.graph) {\n      this.initGraph(graphConfig);\n\n      if (mode === 'FULL') {\n        this.initPlugins();\n        this.initHotKeys();\n      }\n\n      this.initEvents(mode);\n      this.executeAction([ActionType.render, ActionType.queryStatus]);\n    }\n  }\n\n  initGraph(graphConfig: Graph.Options) {\n    this.graph = new Graph({\n      width: 1000,\n      height: 800,\n      panning: {\n        enabled: true,\n        eventTypes: ['leftMouseDown', 'mouseWheel'],\n      },\n      mousewheel: {\n        enabled: true,\n        modifiers: 'ctrl',\n        factor: 1.1,\n        maxScale: 1.5,\n        minScale: 0.5,\n      },\n      highlighting: {\n        magnetAvailable: {\n          name: 'stroke',\n          args: {\n            attrs: {\n              fill: '#fff',\n              stroke: '#A4DEB1',\n              'stroke-width': 4,\n            },\n          },\n        },\n        magnetAdsorbed: {\n          name: 'stroke',\n          args: {\n            attrs: {\n              fill: '#fff',\n              stroke: '#31d0c6',\n              'stroke-width': 4,\n            },\n          },\n        },\n      },\n      connecting: {\n        snap: {\n          radius: 50,\n        },\n        allowBlank: false,\n        allowLoop: false,\n        highlight: true,\n        connector: 'dag-connector',\n        connectionPoint: 'anchor',\n        anchor: 'center',\n        validateMagnet({ magnet }) {\n          return magnet.getAttribute('port-group') !== 'top';\n        },\n        validateConnection({ sourceCell, targetCell, sourceMagnet, targetMagnet }) {\n          return validateConnection(\n            sourceCell as Node,\n            targetCell as Node,\n            sourceMagnet!,\n            targetMagnet!,\n            this.getEdges(),\n          );\n        },\n        createEdge() {\n          return this.createEdge({\n            shape: 'dag-edge',\n            attrs: {\n              line: {\n                strokeDasharray: '5 5',\n              },\n            },\n            zIndex: -1,\n          });\n        },\n      },\n      ...graphConfig,\n    });\n  }\n\n  initPlugins = () => {\n    if (this.graph) {\n      this.graph.use(\n        new Keyboard({\n          global: false,\n        }),\n      );\n      this.graph.use(\n        new Selection({\n          enabled: true,\n          multiple: true,\n          rubberEdge: true,\n          rubberNode: true,\n          modifiers: 'shift',\n          rubberband: true,\n        }),\n      );\n    }\n  };\n\n  initHotKeys = () => {\n    const actionIsRun = [ActionType.runDown, ActionType.runUp, ActionType.runSingle];\n    const actionWithoutSelection = [ActionType.tidyLayout];\n    if (this.graph && this.dagId) {\n      const actions = this.context.ActionHub.getData();\n      for (const item of actions) {\n        if (item.hotKey) {\n          const { key } = item.hotKey;\n          if (key) {\n            this.graph.bindKey(key, (e) => {\n              const nodeIds = this.graph\n                ?.getSelectedCells()\n                .filter((cell) => cell.isNode())\n                .map((cell) => cell.id);\n              const edgeIds = this.graph\n                ?.getSelectedCells()\n                .filter((cell) => cell.isEdge())\n                .map((cell) => cell.id);\n              e.preventDefault();\n              if (this.graph) {\n                // close modal\n                const events = this.context.EventHub.getData();\n                for (const event of events) {\n                  if (event.onBlankClick) {\n                    event.onBlankClick();\n                  }\n                }\n\n                if (actionWithoutSelection.includes(item.type)) {\n                  item.handle(this.graph, this.dagId!);\n                  return;\n                }\n                item.handle(this.graph, this.dagId!, nodeIds, edgeIds);\n                if (actionIsRun.includes(item.type)) {\n                  setTimeout(() => {\n                    this.executeAction(ActionType.queryStatus);\n                  }, 1500);\n                }\n              }\n            });\n          }\n        }\n      }\n    }\n  };\n\n  initEvents(mode: GraphMode = 'FULL') {\n    if (!this.graph) {\n      return;\n    }\n    this.graph.on('node:click', ({ node }) => {\n      const events = this.context.EventHub.getData();\n      for (const event of events) {\n        if (event.onNodeClick) {\n          event.onNodeClick(node);\n        }\n      }\n    });\n\n    this.graph.on('blank:click', () => {\n      const events = this.context.EventHub.getData();\n\n      for (const event of events) {\n        if (event.onBlankClick) {\n          event.onBlankClick();\n        }\n      }\n    });\n\n    this.graph.on('scale', () => {\n      if (this.graph) {\n        const events = this.context.EventHub.getData();\n        for (const event of events) {\n          if (event.onGraphScale) {\n            event.onGraphScale(this.graph.zoom());\n          }\n        }\n      }\n    });\n\n    this.graph.on('node:added', ({ node, options }) => {\n      if (options.dry) {\n        return;\n      }\n      this.executeAction(ActionType.addNode, node);\n    });\n\n    if (mode === 'LITE') return;\n\n    this.graph.on('edge:removed', ({ edge }) => {\n      const events = this.context.EventHub.getData();\n      for (const event of events) {\n        if (event.onEdgeRemoved) {\n          event.onEdgeRemoved(edge);\n        }\n      }\n    });\n\n    this.graph.on('edge:connected', ({ edge }) => {\n      this.executeAction(ActionType.addEdge, edge);\n\n      const events = this.context.EventHub.getData();\n      for (const event of events) {\n        if (event.onEdgeConnected) {\n          event.onEdgeConnected(edge);\n        }\n      }\n    });\n\n    this.graph.on('node:added', () => {\n      this.graph?.drawBackground();\n    });\n\n    this.graph.on('node:moved', ({ node }) => {\n      this.executeAction(ActionType.moveNode, node);\n    });\n\n    this.graph.on('selection:changed', ({ selected }) => {\n      const events = this.context.EventHub.getData();\n      for (const event of events) {\n        if (event.onSelectionChanged) {\n          event.onSelectionChanged(selected);\n        }\n      }\n    });\n\n    this.graph.on('edge:mouseenter', ({ cell, e }) => {\n      if (!this.graph) {\n        return;\n      }\n      const edge = cell as Edge;\n      const edgeView = edge.findView(this.graph) as EdgeView;\n      const { sourceAnchor, targetAnchor } = edgeView;\n      const { clientX, clientY } = e;\n      const p = this.graph.clientToLocal(clientX, clientY);\n\n      if (p.distance(sourceAnchor) < 10 || p.distance(targetAnchor) < 10) {\n        return;\n      }\n\n      cell.addTools([\n        {\n          name: 'button-remove',\n          args: {\n            distance: 0.5,\n            onClick: ({ view }: { view: EdgeView }) => {\n              this.executeAction(ActionType.removeCell, [], [view.cell.id]);\n            },\n          },\n        },\n        {\n          name: 'source-arrowhead',\n          args: {\n            tagName: 'circle',\n            attrs: {\n              r: 4,\n              fill: '#52c41a',\n              stroke: '#52c41a',\n            },\n          },\n        },\n        {\n          name: 'target-arrowhead',\n          args: {\n            tagName: 'circle',\n            attrs: {\n              r: 4,\n              fill: '#52c41a',\n              stroke: '#52c41a',\n            },\n          },\n        },\n      ]);\n    });\n\n    this.graph.on('edge:mouseleave', ({ cell }) => {\n      cell.removeTools();\n    });\n\n    this.graph.on('edge:change:source', ({ edge, current }) => {\n      const item = current as Edge.TerminalCellData;\n      if (item && item.cell && item.port) {\n        this.executeAction(ActionType.updateEdge, edge);\n      }\n    });\n\n    this.graph.on('edge:change:target', ({ edge, current }) => {\n      const item = current as Edge.TerminalCellData;\n      if (item && item.cell && item.port) {\n        this.executeAction(ActionType.updateEdge, edge);\n      }\n    });\n  }\n\n  async executeAction(type: ActionType | ActionType[], ...args: any[]) {\n    const actions = this.context.ActionHub.getData();\n    for (const item of actions) {\n      if (this.dagId) {\n        if (Array.isArray(type)) {\n          if (type.includes(item.type)) {\n            await item.handle(this.graph, this.dagId, ...args);\n          }\n        } else {\n          if (type === item.type) {\n            return await item.handle(this.graph, this.dagId, ...args);\n          }\n        }\n      }\n    }\n  }\n\n  getActionInfo(type: ActionType) {\n    const actions = this.context.ActionHub.getData();\n    for (const item of actions) {\n      if (item.type === type) {\n        return {\n          label: item.label,\n          hotKey: item.hotKey,\n        };\n      }\n    }\n    return null;\n  }\n\n  cancelAction(type: ActionType) {\n    const actions = this.context.ActionHub.getData();\n    for (const item of actions) {\n      if (item.type === type && item.cancel) {\n        return item.cancel();\n      }\n    }\n  }\n\n  cancelAllAction() {\n    const actions = this.context.ActionHub.getData();\n    for (const item of actions) {\n      if (item.cancel) {\n        item.cancel();\n      }\n    }\n  }\n\n  getGraphInstance() {\n    return this.graph;\n  }\n\n  getSelectedCells() {\n    if (this.graph) {\n      return this.graph.getSelectedCells();\n    }\n    return [];\n  }\n\n  dispose() {\n    if (this.graph) {\n      this.graph.dispose();\n      this.context.dataService.close();\n      this.cancelAllAction();\n      this.graph = null;\n      this.dagId = null;\n    }\n  }\n}\n","import type { Edge, Node } from '@antv/x6';\n\nexport const validateConnection = (\n  sourceNode: Node,\n  targetNode: Node,\n  sourceMagnet: Element,\n  targetMagnet: Element,\n  edges: Edge[],\n) => {\n  // 只能从 bottom 连接桩开始连接，连接到 top 连接桩\n  if (!sourceMagnet || sourceMagnet.getAttribute('port-group') === 'top') {\n    return false;\n  }\n  if (!targetMagnet || targetMagnet.getAttribute('port-group') !== 'top') {\n    return false;\n  }\n\n  // 不能重复连线\n  const port = targetMagnet.getAttribute('port') as string;\n  if (edges.find((edge) => edge.getTargetPortId() === port)) {\n    return false;\n  }\n\n  //连接桩类型校验\n  let res = true;\n  const sourcePortId = sourceMagnet.getAttribute('port') as string;\n  const sourcePortType = sourceNode.getPort(sourcePortId)?.type;\n\n  const targetPortId = targetMagnet.getAttribute('port') as string;\n  const targetPortType = targetNode.getPort(targetPortId)?.type;\n\n  for (const sourceType of sourcePortType) {\n    // const res = targetPortType.indexOf(sourceType);\n    if (targetPortType.indexOf(sourceType) < 0) {\n      res = false;\n      break;\n    }\n  }\n\n  return res;\n};\n\nexport const splitNodeId = (nodeId: string) => {\n  // test_node_1\n  const list = nodeId.split('-');\n  if (list.length !== 3) {\n    throw new Error('invalid node id');\n  }\n  return {\n    dagId: list[0],\n    index: parseInt(list[2], 10),\n  };\n};\n\nexport const splitPortId = (portId: string) => {\n  // test_node_1_output_1\n  const list = portId.split('-');\n  if (list.length !== 5) {\n    throw new Error('invalid port id');\n  }\n  const nodeId = list.slice(0, 3).join('-');\n  return {\n    nodeId,\n    type: list[3] as 'input' | 'output',\n    index: parseInt(list[4], 10),\n  };\n};\n","import DAGContext from '../context';\nimport type { GraphModel } from '../types';\nimport { NodeStatus } from '../types';\n\nimport type { RequestService } from './protocol';\n\nexport class DefaultRequestService extends DAGContext implements RequestService {\n  async queryStatus(dagId: string) {\n    return {\n      nodeStatus: [\n        {\n          nodeId: 'test-node-1',\n          status: NodeStatus.success,\n        },\n        {\n          nodeId: 'test-node-2',\n          status: NodeStatus.running,\n        },\n      ],\n      finished: false,\n    };\n  }\n\n  async queryDag(dagId: string) {\n    return {\n      nodes: [\n        // {\n        //   codeName: 'ss_sgd_train',\n        //   id: 'test_node_1',\n        //   label: '逻辑回归',\n        //   x: 100,\n        //   y: 100,\n        //   status: 0,\n        // },\n        // {\n        //   codeName: 'ss_sgd_predict',\n        //   id: 'test_node_2',\n        //   label: '模型预测',\n        //   x: 300,\n        //   y: 300,\n        //   status: 2,\n        // },\n      ],\n      edges: [\n        // {\n        //   id: 'test_node_1_output_0__test_node_2_input_0',\n        //   source: 'test_node_1',\n        //   sourceAnchor: 'test_node_1_output_0',\n        //   target: 'test_node_2',\n        //   targetAnchor: 'test_node_2_input_0',\n        // },\n      ],\n    } as GraphModel;\n  }\n\n  async saveDag(dagId: string, model: GraphModel) {\n    return;\n  }\n\n  async startRun(dagId: string, componentIds: string[]) {\n    return;\n  }\n\n  async stopRun(dagId: string, componentId?: string) {\n    return;\n  }\n\n  async continueRun(dagId: string, componentId?: string) {\n    return;\n  }\n\n  async getMaxNodeIndex(dagId: string) {\n    return 2;\n  }\n}\n","import DAGContext from '../context';\nimport type { GraphPort, GraphNodeOutput } from '../types';\n\nimport type { HookService } from './protocol';\n\nexport class DefaultHookService extends DAGContext implements HookService {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async createPort(nodeId: string, codeName: string): Promise<GraphPort[]> {\n    return [];\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async createResult(nodeId: string, codeName: string): Promise<GraphNodeOutput[]> {\n    return [];\n  }\n}\n","import DAGContext from '../context';\nimport type { GraphEdge, GraphNode } from '../types';\n\nimport type { DataService } from './protocol';\n\nexport class DefaultDataService extends DAGContext implements DataService {\n  nodes: GraphNode[] = [];\n  edges: GraphEdge[] = [];\n\n  async fetch() {\n    const { nodes, edges } = await this.context.requestService.queryDag(\n      this.context.dagId,\n    );\n    this.nodes = nodes;\n    this.edges = edges;\n    return {\n      nodes,\n      edges,\n    };\n  }\n\n  get() {\n    return {\n      nodes: this.nodes,\n      edges: this.edges,\n    };\n  }\n\n  getNodes() {\n    return this.nodes;\n  }\n\n  getEdges() {\n    return this.edges;\n  }\n\n  async addNodes(nodes: GraphNode[]) {\n    this.nodes.push(...nodes);\n    await this.context.requestService.saveDag(this.context.dagId, {\n      nodes: this.nodes,\n      edges: this.edges,\n    });\n  }\n\n  async addEdges(edges: GraphEdge[]) {\n    this.edges.push(...edges);\n    await this.context.requestService.saveDag(this.context.dagId, {\n      nodes: this.nodes,\n      edges: this.edges,\n    });\n  }\n\n  async removeNodesOrEdges(nodeIds: string[], edgeIds: string[]) {\n    this.nodes = this.nodes.filter((node) => !nodeIds.includes(node.id));\n    this.edges = this.edges.filter((edge) => !edgeIds.includes(edge.id));\n    this.context.requestService.saveDag(this.context.dagId, {\n      nodes: this.nodes,\n      edges: this.edges,\n    });\n  }\n\n  async changeNode(changed: { nodeId: string; meta: Partial<GraphNode> }[]) {\n    changed.forEach(({ nodeId, meta }) => {\n      const node = this.nodes.find((item) => item.id === nodeId);\n      if (node) {\n        Object.keys(meta).forEach((key) => {\n          const str = key as keyof GraphNode;\n          node[str] = meta[str] as never;\n        });\n      }\n    });\n    this.context.requestService.saveDag(this.context.dagId, {\n      nodes: this.nodes,\n      edges: this.edges,\n    });\n  }\n\n  async changeEdge(changed: { edgeId: string; meta: Partial<GraphEdge> }[]) {\n    changed.forEach(({ edgeId, meta }) => {\n      const edge = this.edges.find((item) => item.id === edgeId);\n      if (edge) {\n        Object.keys(meta).forEach((key) => {\n          const str = key as keyof GraphEdge;\n          edge[str] = meta[str] as never;\n        });\n      }\n    });\n    this.context.requestService.saveDag(this.context.dagId, {\n      nodes: this.nodes,\n      edges: this.edges,\n    });\n  }\n\n  close() {\n    this.nodes = [];\n    this.edges = [];\n  }\n}\n","import {\n  CheckCircleOutlined,\n  CloseCircleOutlined,\n  SyncOutlined,\n  CopyOutlined,\n  DeleteOutlined,\n  LogoutOutlined,\n  LoginOutlined,\n  PlayCircleOutlined,\n  StopOutlined,\n  PoweroffOutlined,\n} from '@ant-design/icons';\nimport type { Graph, Node } from '@antv/x6';\nimport { Dropdown, Menu } from '@antv/x6-react-components';\nimport { register } from '@antv/x6-react-shape';\nimport { Popover } from 'antd';\nimport '@antv/x6-react-components/es/dropdown/style/index.css';\nimport '@antv/x6-react-components/es/menu/style/index.css';\nimport classnames from 'classnames';\nimport React from 'react';\n\nimport { DAGGlobalContainer } from '..';\nimport { ActionType, HotKeys } from '../actions';\nimport { NodeStatus } from '../types';\nimport type { GraphNode } from '../types';\n\nimport { Description } from './descriptions';\nimport './index.less';\nimport { ComponentIcons } from './node-icon';\nimport type { DAGProtocol } from '../protocol';\n\nconst { Item: MenuItem, Divider } = Menu;\nexport const ShowMenuContext = React.createContext(true);\n\nconst DagNode = (props: { node: Node; graph: Graph }) => {\n  const { node, graph } = props;\n  const DAGContext = DAGGlobalContainer.get(graph) as DAGProtocol;\n  const graphManager = DAGContext?.graphManager;\n  const data = node.getData<GraphNode>();\n  const { id, status, label, codeName, styles } = data;\n  const statusName = NodeStatus[status];\n  const [domain] = codeName.split('/');\n  const {\n    isOpaque = false,\n    isHighlighted = false,\n    isContinueRun = false,\n  } = styles || {};\n  const showMenu = React.useContext(ShowMenuContext);\n\n  const getStatusFlag = () => {\n    switch (status) {\n      case NodeStatus.success:\n        return <CheckCircleOutlined style={{ color: 'rgba(35,182,95,1)' }} />;\n      case NodeStatus.failed:\n        return <CloseCircleOutlined style={{ color: 'rgba(252,117,116,1)' }} />;\n      case NodeStatus.stopped:\n        return <PoweroffOutlined style={{ color: 'rgba(252,117,116,1)' }} />;\n      case NodeStatus.running:\n        return <SyncOutlined style={{ color: '#1890FF' }} spin />;\n      case NodeStatus.pending:\n        return null;\n      default:\n        return null;\n    }\n  };\n\n  const onMenuItemClick = (key: ActionType) => {\n    const argsIsArrayKey = [ActionType.removeCell, ActionType.copy];\n    const argsIsRun = [ActionType.runDown, ActionType.runUp, ActionType.runSingle];\n    const argsIsContinue = [ActionType.continueRun];\n    if (argsIsArrayKey.includes(key)) {\n      graphManager.executeAction(key, [id]);\n    } else if (argsIsRun.includes(key)) {\n      graphManager.executeAction(key, [id]);\n      setTimeout(() => {\n        graphManager.executeAction(ActionType.queryStatus, []);\n      }, 1500);\n    } else if (argsIsContinue.includes(key)) {\n      graphManager.executeAction(key, id);\n      setTimeout(() => {\n        graphManager.executeAction(ActionType.queryStatus, []);\n      }, 1500);\n    } else {\n      graphManager.executeAction(key, id);\n    }\n  };\n\n  /**\n   * Popover content 以及 getMenuItems 是否展示继续执行按钮\n   * 目前只支持 (SecureBoost训练 SSGLM训练 SS-XGB训练) 算子才可 继续执行, 即 isContinueRun = true\n   * */\n  const showContinueRun =\n    showMenu &&\n    (data.status === NodeStatus.stopped || data.status === NodeStatus.failed) &&\n    isContinueRun;\n\n  const getMenuItems = () => {\n    const menu = (\n      <Menu\n        hasIcon={true}\n        onClick={(key: string) => onMenuItemClick(key as ActionType)}\n      >\n        <MenuItem\n          name={ActionType.copy}\n          icon={<CopyOutlined />}\n          hotkey={HotKeys.copyActionHotKey.text}\n          text=\"复制\"\n        />\n        <MenuItem\n          name={ActionType.removeCell}\n          icon={<DeleteOutlined />}\n          hotkey={HotKeys.removeCellActionHotKey.text}\n          text=\"删除\"\n        />\n        <Divider />\n        <MenuItem\n          name={ActionType.runDown}\n          icon={<LogoutOutlined />}\n          hotkey={HotKeys.runDownActionHotKey.text}\n          text=\"从此处开始执行\"\n        />\n        <MenuItem\n          name={ActionType.runUp}\n          icon={<LoginOutlined />}\n          hotkey={HotKeys.runUpActionHotKey.text}\n          text=\"执行到此处\"\n        />\n        <MenuItem\n          name={ActionType.runSingle}\n          icon={<PlayCircleOutlined />}\n          hotkey={HotKeys.runSingleActionHotKey.text}\n          text=\"执行节点\"\n        />\n        {data.status === NodeStatus.running && (\n          <MenuItem name={ActionType.stopRun} icon={<StopOutlined />} text=\"停止执行\" />\n        )}\n        {showContinueRun && (\n          <MenuItem\n            name={ActionType.continueRun}\n            icon={<SyncOutlined />}\n            text=\"继续执行\"\n          />\n        )}\n      </Menu>\n    );\n    return menu;\n  };\n\n  return showMenu ? (\n    <Dropdown\n      overlay={getMenuItems()}\n      trigger={['contextMenu']}\n      overlayStyle={{ overflowY: 'auto' }}\n    >\n      <Popover\n        trigger=\"hover\"\n        content={\n          <Description data={{ ...data, showContinueRun }} dagContext={DAGContext} />\n        }\n        placement=\"bottom\"\n        arrow={false}\n        overlayClassName={'popover'}\n        overlayStyle={{ width: 258 }}\n        destroyTooltipOnHide\n      >\n        <div className={classnames(['dag-node', statusName])}>\n          <span className=\"icon\">\n            {ComponentIcons[domain] || ComponentIcons['default']}\n          </span>\n          <span className=\"label\">{label}</span>\n          <span className=\"status\">{getStatusFlag()}</span>\n        </div>\n      </Popover>\n    </Dropdown>\n  ) : (\n    <Popover\n      trigger=\"hover\"\n      content={\n        <Description data={{ ...data, showContinueRun }} dagContext={DAGContext} />\n      }\n      placement=\"bottom\"\n      arrow={false}\n      overlayClassName={'popover'}\n      overlayStyle={{ width: 258 }}\n      destroyTooltipOnHide\n    >\n      <div\n        className={classnames(\n          ['dag-node', statusName],\n          { opaque: isOpaque },\n          { hightlight: isHighlighted },\n        )}\n      >\n        <span className=\"icon\">\n          {ComponentIcons[domain] || ComponentIcons['default']}\n        </span>\n        <span className=\"label\">{label}</span>\n        <span className=\"status\">{getStatusFlag()}</span>\n      </div>\n    </Popover>\n  );\n};\n\n// register node\nregister({\n  shape: 'dag-node',\n  width: 180,\n  height: 36,\n  component: DagNode,\n  effect: ['data'],\n  inherit: 'react-shape',\n  ports: {\n    groups: {\n      top: {\n        position: 'top',\n        attrs: {\n          circle: {\n            r: 4,\n            magnet: true,\n            stroke: '#C2C8D5',\n            strokeWidth: 1,\n            fill: '#fff',\n          },\n        },\n      },\n      bottom: {\n        position: 'bottom',\n        markup: [\n          {\n            tagName: 'circle',\n            selector: 'outer',\n          },\n          {\n            tagName: 'circle',\n            selector: 'inner',\n          },\n        ],\n        attrs: {\n          outer: {\n            r: 10,\n            magnet: true,\n            stroke: 'transparent',\n            fill: 'transparent',\n          },\n          inner: {\n            r: 4,\n            magnet: true,\n            stroke: '#C2C8D5',\n            strokeWidth: 1,\n            fill: '#fff',\n          },\n        },\n      },\n    },\n  },\n});\n","import {\n  ContainerOutlined,\n  ExperimentOutlined,\n  FileSearchOutlined,\n  FileTextOutlined,\n} from '@ant-design/icons';\nimport { Badge, Tooltip, Typography } from 'antd';\n\nimport { ActionType } from '../actions';\nimport { EllipsisMiddles } from '../component/ellipsis-middle';\nimport type { DAGProtocol } from '../protocol';\nimport { NodeStatus } from '../types';\n\nimport './index.less';\nimport { parseNodeId } from './utils';\n\nconst { Paragraph } = Typography;\n\nenum statusColorEnum {\n  success = 'success',\n  error = 'error',\n  default = 'default',\n}\n\nexport const Description = (props: IProps) => {\n  const { dagContext } = props;\n  const { id, status, outputs, codeName, showContinueRun } = props.data;\n  const { nodeNum } = parseNodeId(id);\n  let statusDes = '';\n  let statusColor = '';\n  if (status === NodeStatus.success) {\n    statusDes = '成功';\n    statusColor = statusColorEnum.success;\n  } else if (status === NodeStatus.failed) {\n    statusDes = '失败';\n    statusColor = statusColorEnum.error;\n  } else if (status === NodeStatus.running) {\n    statusDes = '执行中';\n  } else if (status === NodeStatus.pending) {\n    statusDes = '已提交';\n  } else if (status === NodeStatus.default) {\n    statusDes = '已配置';\n  } else if (status === NodeStatus.stopped) {\n    statusDes = '已停止';\n  } else if (status === NodeStatus.unfinished) {\n    statusDes = '待配置';\n    statusColor = statusColorEnum.default;\n  }\n\n  return (\n    <div className={'description'}>\n      <div className={'bottom'}>\n        <div className={'copy'}>\n          <span>组件ID：</span>\n          <span>\n            <Paragraph\n              copyable={{\n                text: id,\n                tooltips: ['复制', '复制成功'],\n              }}\n              style={{ marginBottom: 0, color: '#000000a6', fontSize: 12 }}\n            >\n              {nodeNum}\n            </Paragraph>\n          </span>\n        </div>\n        <div style={{ marginBottom: '4px' }}>\n          <span>执行状态：</span>\n          <span>\n            {statusColor && (\n              <Badge\n                status={statusColorEnum[statusColor as keyof typeof statusColorEnum]}\n              />\n            )}\n            <span style={{ marginLeft: '4px' }}>{statusDes}</span>\n          </span>\n          {showContinueRun && (\n            <span>\n              <ContinueRunItem {...props} />\n            </span>\n          )}\n        </div>\n        {status === NodeStatus.success && outputs && (\n          <div>\n            <div style={{ marginBottom: '4px' }}>执行结果：</div>\n            {outputs.map((output: any) => (\n              <ResultItem\n                output={output}\n                key={output.id}\n                codeName={codeName}\n                dagContext={dagContext}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface IProps {\n  data: any; // NodeData;\n  dagContext: DAGProtocol;\n}\n\nconst resultInfo: Record<string, { text: string; icon: any }> = {\n  table: { text: '输出表', icon: <FileTextOutlined /> },\n  model: { text: '模型', icon: <ExperimentOutlined /> },\n  rule: { text: '规则', icon: <ContainerOutlined /> },\n  report: { text: '报告', icon: <FileSearchOutlined /> },\n};\n\nconst ResultItem = (props: {\n  output: { name: string; id: string; type: string };\n  codeName: string;\n  dagContext: DAGProtocol;\n}) => {\n  const { output, codeName, dagContext } = props;\n  const { name, type } = output;\n\n  const onResultClicked = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    dagContext.graphManager.executeAction(ActionType.showResult, output.id, codeName);\n  };\n\n  return (\n    <div className={'resultItem'} onClick={onResultClicked}>\n      {resultInfo[type]?.icon}\n      {resultInfo[type]?.text && (\n        <span className={'title'}>{resultInfo[type].text}：</span>\n      )}\n      <Tooltip title={name}>\n        <EllipsisMiddles className={'elllips'} maxWidth={130} suffixCount={3}>\n          {name}\n        </EllipsisMiddles>\n      </Tooltip>\n    </div>\n  );\n};\n\nconst ContinueRunItem = (props: IProps) => {\n  const { dagContext } = props;\n  const { id } = props.data;\n\n  const onContinueRun = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    dagContext.graphManager.executeAction(ActionType.continueRun, id);\n    setTimeout(() => {\n      dagContext.graphManager.executeAction(ActionType.queryStatus, []);\n    }, 1500);\n  };\n\n  return (\n    <span onClick={onContinueRun} className={'continueRunBtn'}>\n      继续执行\n    </span>\n  );\n};\n","import { Typography } from 'antd';\n// import React from 'react';\n\nconst { Text } = Typography;\ninterface Props {\n  suffixCount: number;\n  children: string | undefined;\n  maxWidth?: number | string;\n  className?: string;\n  showTip?: boolean;\n  style?: Record<string, any>;\n  onClick?: (e?: any) => void;\n}\n\nexport const EllipsisMiddles = (props: Props) => {\n  const {\n    suffixCount,\n    children,\n    maxWidth,\n    className,\n    onClick,\n    style,\n    showTip = true,\n  } = props;\n  let start;\n  let suffix;\n  if (children && children?.length > suffixCount) {\n    start = children?.slice(0, children?.length - suffixCount)?.trim();\n    suffix = children?.slice(-suffixCount)?.trim();\n  } else {\n    start = children;\n    suffix = '';\n  }\n\n  return (\n    <Text\n      onClick={onClick}\n      className={className}\n      style={{\n        ...style,\n        maxWidth,\n        width: '100%',\n        minWidth: `${suffixCount + 2}em`,\n      }}\n      ellipsis={{\n        suffix,\n        tooltip: showTip ? <span>{children}</span> : null,\n      }}\n    >\n      {start}\n    </Text>\n  );\n};\n","export const parseNodeId = (nodeId: string) => {\n  // pipeline1-node-1\n  const list = nodeId.split('-');\n  if (list.length !== 3) {\n    throw new Error('invalid node id');\n  }\n  return {\n    dagId: list[0],\n    nodeNum: parseInt(list[2], 10),\n  };\n};\n","import {\n  DatabaseFilled,\n  PieChartFilled,\n  LayoutFilled,\n  CodeFilled,\n  BulbFilled,\n  FundFilled,\n} from '@ant-design/icons';\n\nexport const ComponentIcons: Record<string, React.ReactElement> = {\n  default: <DatabaseFilled style={{ color: '#A1AABC' }} />,\n  stats: <PieChartFilled style={{ color: '#A1AABC' }} />,\n  preprocessing: <LayoutFilled style={{ color: '#A1AABC' }} />,\n  feature: <LayoutFilled style={{ color: '#A1AABC' }} />,\n  control: <CodeFilled style={{ color: '#A1AABC' }} />,\n  'ml.train': <BulbFilled style={{ color: '#A1AABC' }} />,\n  'ml.eval': <FundFilled style={{ color: '#A1AABC' }} />,\n};\n","import { Graph } from '@antv/x6';\n\nGraph.registerEdge(\n  'dag-edge',\n  {\n    inherit: 'edge',\n    attrs: {\n      line: {\n        stroke: '#C2C8D5',\n        strokeWidth: 1,\n        targetMarker: null,\n      },\n    },\n    zIndex: -1,\n  },\n  true,\n);\n","import { Graph, Path } from '@antv/x6';\n\nGraph.registerConnector(\n  'dag-connector',\n  (s, e) => {\n    const offset = 4;\n    const deltaY = Math.abs(e.y - s.y);\n    const control = Math.floor((deltaY / 3) * 2);\n\n    const v1 = { x: s.x, y: s.y + offset + control };\n    const v2 = { x: e.x, y: e.y - offset - control };\n\n    return Path.normalize(\n      `M ${s.x} ${s.y}\n     L ${s.x} ${s.y + offset}\n     C ${v1.x} ${v1.y} ${v2.x} ${v2.y} ${e.x} ${e.y - offset}\n     L ${e.x} ${e.y}\n    `,\n    );\n  },\n  true,\n);\n","/** 暴露接口和默认类方便继承 */\nexport * from './actions';\nexport * from './manager';\nexport * from './request';\nexport * from './hooks';\n// export * from './vis';\nexport * from './data';\nexport * from './types';\nexport * from './utils';\nexport * from './shapes';\n\nimport type { Graph } from '@antv/x6';\nimport { Portal, register as ShapeRegister } from '@antv/x6-react-shape';\nimport { createRegistry, Registry } from '@secretflow/utils';\n\nimport type { ActionProtocol } from './actions';\nimport { Actions } from './actions';\nimport { createAction } from './actions';\nimport type { ActionFactory } from './actions/protocol';\nimport type { DataService } from './data';\nimport { DefaultDataService } from './data';\nimport type { HookService } from './hooks';\nimport { DefaultHookService } from './hooks';\nimport type { GraphManager, GraphMode } from './manager';\nimport { DefaultGraphManager } from './manager';\nimport type { DAGProtocol } from './protocol';\nimport type { RequestService } from './request';\nimport { DefaultRequestService } from './request';\nimport type { GraphEventHandlerProtocol } from './types';\n\nexport { Portal, ShapeRegister, Registry };\n\nexport type { RequestService, HookService, DataService, GraphManager };\n\nexport const DAGGlobalContainer = new WeakMap<Graph, DAG>();\n\nexport class DAG implements DAGProtocol {\n  dagId = '';\n\n  requestService: RequestService = new DefaultRequestService(this);\n  hookService: HookService = new DefaultHookService(this);\n  dataService: DataService = new DefaultDataService(this);\n  graphManager: GraphManager = new DefaultGraphManager(this);\n\n  ActionHub = createRegistry<ActionProtocol>();\n  EventHub = createRegistry<GraphEventHandlerProtocol>();\n\n  constructor() {\n    Actions.forEach((Action) => {\n      this.ActionHub.register(new Action(this));\n    });\n  }\n\n  init(\n    dagId: string,\n    graphConfig: Graph.Options,\n    mode: GraphMode = 'FULL',\n    ...args: any[]\n  ) {\n    this.dagId = dagId;\n    this.graphManager.init(dagId, graphConfig, mode, ...args);\n    if (this.graphManager.graph) {\n      DAGGlobalContainer.set(this.graphManager.graph, this);\n    }\n  }\n\n  addActions(actions: ActionFactory[]) {\n    actions.forEach((Action) => {\n      this.ActionHub.register(createAction(Action, this));\n    });\n  }\n\n  addGraphEvents(event: GraphEventHandlerProtocol) {\n    this.EventHub.register(event);\n  }\n\n  dispose() {\n    if (this.graphManager.graph) {\n      DAGGlobalContainer.delete(this.graphManager.graph);\n    }\n    this.graphManager.dispose();\n  }\n}\n"],"mappings":"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","names":["ActionType","NodeStatus","Language","node","DAG_COPY_CONTENT","Typography","jsx","Typography","statusColorEnum","jsx","jsx","jsxs","DAGContext","Graph","Graph"]}